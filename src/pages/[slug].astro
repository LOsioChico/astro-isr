---
// Enable ISR for this dynamic page
Astro.response.headers.set("x-isr", "true");
Astro.response.headers.set("cache-control", "max-age=30");

const { slug } = Astro.params;
const currentTime = new Date().toLocaleString();
const randomValue = Math.random();

// Simulate some dynamic content based on slug
const getContentForSlug = (slug: string) => {
  const contents = {
    products: {
      title: "üõçÔ∏è Products",
      description: "Dynamic product catalog with ISR caching",
      accent: "#3b82f6",
    },
    blog: {
      title: "üìù Blog",
      description: "Latest blog posts with edge caching",
      accent: "#10b981",
    },
    about: {
      title: "üëã About",
      description: "Company information with ISR",
      accent: "#8b5cf6",
    },
  };

  return (
    contents[slug as keyof typeof contents] || {
      title: `üìÑ ${slug?.charAt(0).toUpperCase()}${slug?.slice(1)}`,
      description: `Dynamic content for "${slug}" with ISR caching`,
      accent: "#f59e0b",
    }
  );
};

const content = getContentForSlug(slug || "default");
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{content.title} - Astro ISR</title>
    <style define:vars={{ accentColor: content.accent }}>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          sans-serif;
        line-height: 1.6;
        color: #1a1a1a;
        background: #f8fafc;
        min-height: 100vh;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }

      .header {
        text-align: center;
        margin-bottom: 3rem;
      }

      .header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--accentColor);
        margin-bottom: 0.5rem;
      }

      .header p {
        font-size: 1.1rem;
        color: #64748b;
      }

      .nav {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        border: 1px solid #e2e8f0;
      }

      .nav-title {
        font-weight: 600;
        margin-bottom: 1rem;
        color: #374151;
      }

      .nav-links {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
      }

      .nav a {
        color: #475569;
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        background: #f1f5f9;
        font-weight: 500;
        transition: all 0.2s ease;
      }

      .nav a:hover {
        background: #e2e8f0;
        color: #334155;
      }

      .card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        border: 1px solid #e2e8f0;
      }

      .route-info {
        background: linear-gradient(
          135deg,
          var(--accentColor),
          rgba(59, 130, 246, 0.8)
        );
        color: white;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        text-align: center;
      }

      .route-info h2 {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
      }

      .info-grid {
        display: grid;
        gap: 1.5rem;
        margin-bottom: 2rem;
      }

      .info-item {
        background: #f8fafc;
        padding: 1.25rem;
        border-radius: 8px;
        border-left: 4px solid var(--accentColor);
      }

      .info-item h3 {
        font-size: 1rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
      }

      .info-item p {
        color: #6b7280;
        font-size: 0.95rem;
      }

      .info-item strong {
        color: #1f2937;
        font-weight: 600;
      }

      .features {
        background: #f8fafc;
        padding: 1.25rem;
        border-radius: 8px;
        margin-bottom: 2rem;
      }

      .features h3 {
        font-size: 1rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1rem;
      }

      .features ul {
        list-style: none;
      }

      .features li {
        color: #6b7280;
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
        padding-left: 1.5rem;
        position: relative;
      }

      .features li::before {
        content: "‚úì";
        position: absolute;
        left: 0;
        color: var(--accentColor);
        font-weight: bold;
      }

      .actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
      }

      .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .btn-primary {
        background: var(--accentColor);
        color: white;
      }

      .btn-primary:hover {
        opacity: 0.9;
      }

      .btn-secondary {
        background: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
      }

      .btn-secondary:hover {
        background: #e2e8f0;
      }

      .footer {
        text-align: center;
        margin-top: 2rem;
        color: #94a3b8;
        font-size: 0.875rem;
      }

      @media (max-width: 640px) {
        .container {
          padding: 1rem;
        }

        .header h1 {
          font-size: 2rem;
        }

        .nav-links {
          flex-direction: column;
        }

        .actions {
          flex-direction: column;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>{content.title}</h1>
        <p>{content.description}</p>
      </div>

      <div class="nav">
        <div class="nav-title">Navigation</div>
        <div class="nav-links">
          <a href="/">Home</a>
          <a href="/products">Products</a>
          <a href="/blog">Blog</a>
          <a href="/about">About</a>
          <a href="/custom-page">Custom</a>
        </div>
      </div>

      <div class="card">
        <div class="route-info">
          <h2>Current Route: /{slug}</h2>
          <p>Cached independently with 30s TTL</p>
        </div>

        <div class="info-grid">
          <div class="info-item">
            <h3>üìÖ Generated at</h3>
            <p><strong>{currentTime}</strong></p>
          </div>

          <div class="info-item">
            <h3>üé≤ Random value</h3>
            <p><strong>{randomValue}</strong></p>
          </div>
        </div>

        <div class="features">
          <h3>‚ö° Dynamic Route ISR</h3>
          <ul>
            <li>Cache TTL: 30 seconds (faster than homepage)</li>
            <li>Dynamic content: Based on URL slug parameter</li>
            <li>Independent caching: Each route cached separately</li>
            <li>Auto-regeneration: Fresh content after 30s</li>
          </ul>
        </div>

        <div class="actions">
          <button class="btn btn-primary" onclick="window.location.reload()">
            üîÑ Refresh Page
          </button>
          <button class="btn btn-secondary" onclick="revalidateCache()">
            üóëÔ∏è Clear Cache
          </button>
        </div>

        <div class="footer">
          üí° Try different routes to see independent caching
        </div>
      </div>
    </div>

    <script>
      async function revalidateCache() {
        try {
          const currentUrl = window.location.href;
          const response = await fetch(
            `/api/revalidate?url=${encodeURIComponent(currentUrl)}`
          );
          const data = await response.json();

          if (data.success) {
            alert("‚úÖ Cache cleared! Refresh to see fresh content.");
          } else {
            alert("‚ùå Failed to clear cache: " + data.error);
          }
        } catch (error) {
          alert(
            "‚ùå Error: " +
              (error instanceof Error ? error.message : String(error))
          );
        }
      }
    </script>
  </body>
</html>
